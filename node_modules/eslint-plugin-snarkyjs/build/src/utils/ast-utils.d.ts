import type { TSESTree } from '@typescript-eslint/experimental-utils';
/**
 * Returns all decorators of a node if they exist, otherwise returns an empty list.
 * @param  node Node to get decorators from
 * @returns A list of decorators or an empty list
 */
export declare function getDecorators(node: TSESTree.Node): TSESTree.Decorator[];
/**
 * For a given list of decorators, find a decorator by name. Returns `undefined` if not found.
 * @param decorators A list of decorators to search
 * @param decoratorToFind The name of the decorator to find
 * @returns The specified decorator or undefined
 */
export declare function getSpecifiedDecorator(decorators: TSESTree.Decorator[], decoratorToFind: string): TSESTree.Decorator | undefined;
/**
 * Gets the first value of a decorator expression if it has one, otherwiser returns `undefined`.
 * For example, if called on `@state(T)`, it will return `T`.
 * @param decorator The specified decorator
 * @returns The first value of the decorator or undefined
 */
export declare function getFirstDecoratorValue(decorator: TSESTree.Decorator): string | undefined;
/**
 * Gets the second value of a decorator expression if it has one, otherwise returns `undefined`.
 * For example, if called on `@state(T, U)`, it will return `U`
 * @param decorator The specified decorator
 * @returns The second value of the decorator or undefined
 */
export declare function getSecondDecoratorValue(decorator: TSESTree.Decorator): string | number | bigint | boolean | RegExp | null | undefined;
/**
 * Gets the annotated type of a node if it has one. For example, if a node has the statement
 * `node: T`, it will return `T`. Otherwise return undefined.
 * @param node The specified node
 * @returns The type annotation of the node or undefined
 */
export declare function getPropertyType(node: TSESTree.Node): string | undefined;
/**
 * Gets the function name of a node if it has one, otherwise return undefined.
 * @param node The specified node
 * @returns The function name or undefined
 */
export declare function getFunctionName(node: TSESTree.Node): string | undefined;
/**
 * Checks to see if the specified `CallExpression` node uses a banned import or calls upon
 * a banned function.
 * @param node The specified `CallExpression` node
 * @param bannedImports A set of banned imports
 * @param bannedFunctions A set of banned functions
 * @returns True if the `CallExpression` calls on a banned import or function or false
 */
export declare let isBannedCallExpression: (node: TSESTree.CallExpression, bannedImports: Set<string>, bannedFunctions: Set<string>) => boolean;
