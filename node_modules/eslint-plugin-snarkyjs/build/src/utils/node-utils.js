"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTSArrayType = exports.isTSTypeReference = exports.isProgramStatement = exports.isPropertyDefinition = exports.isClassDeclaration = exports.isThrowStatement = exports.isIfStatement = exports.isConditionalExpression = exports.isMemberExpression = exports.isCallExpression = exports.isVariableDeclarator = exports.isArrowFunctionExpression = exports.isMethodDefinition = exports.isFunctionExpression = exports.isFunctionDeclaration = exports.isLiteral = exports.isIdentifier = void 0;
function isIdentifier(node) {
    return node !== undefined && node.type === 'Identifier';
}
exports.isIdentifier = isIdentifier;
function isLiteral(node) {
    return node !== undefined && node.type === 'Literal';
}
exports.isLiteral = isLiteral;
function isFunctionDeclaration(node) {
    return node !== undefined && node.type === 'FunctionDeclaration';
}
exports.isFunctionDeclaration = isFunctionDeclaration;
function isFunctionExpression(node) {
    return node !== undefined && node.type === 'FunctionExpression';
}
exports.isFunctionExpression = isFunctionExpression;
function isMethodDefinition(node) {
    return node !== undefined && node.type === 'MethodDefinition';
}
exports.isMethodDefinition = isMethodDefinition;
function isArrowFunctionExpression(node) {
    return node !== undefined && node.type === 'ArrowFunctionExpression';
}
exports.isArrowFunctionExpression = isArrowFunctionExpression;
function isVariableDeclarator(node) {
    return node !== undefined && node.type === 'VariableDeclarator';
}
exports.isVariableDeclarator = isVariableDeclarator;
function isCallExpression(node) {
    return node !== undefined && node.type === 'CallExpression';
}
exports.isCallExpression = isCallExpression;
function isMemberExpression(node) {
    return node !== undefined && node.type === 'MemberExpression';
}
exports.isMemberExpression = isMemberExpression;
function isConditionalExpression(node) {
    return node !== undefined && node.type === 'ConditionalExpression';
}
exports.isConditionalExpression = isConditionalExpression;
function isIfStatement(node) {
    return node !== undefined && node.type === 'IfStatement';
}
exports.isIfStatement = isIfStatement;
function isThrowStatement(node) {
    return node !== undefined && node.type === 'ThrowStatement';
}
exports.isThrowStatement = isThrowStatement;
function isClassDeclaration(node) {
    return node !== undefined && node.type === 'ClassDeclaration';
}
exports.isClassDeclaration = isClassDeclaration;
function isPropertyDefinition(node) {
    return node !== undefined && node.type === 'PropertyDefinition';
}
exports.isPropertyDefinition = isPropertyDefinition;
function isProgramStatement(node) {
    return node !== undefined && node.type === 'Program';
}
exports.isProgramStatement = isProgramStatement;
function isTSTypeReference(node) {
    return node !== undefined && node.type === 'TSTypeReference';
}
exports.isTSTypeReference = isTSTypeReference;
function isTSArrayType(node) {
    return node !== undefined && node.type === 'TSArrayType';
}
exports.isTSArrayType = isTSArrayType;
//# sourceMappingURL=node-utils.js.map